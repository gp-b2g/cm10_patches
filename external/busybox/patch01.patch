diff --git a/Android.mk b/Android.mk
index 9df85da..b4e4604 100644
--- a/Android.mk
+++ b/Android.mk
@@ -25,6 +25,14 @@ include $(BUILD_STATIC_LIBRARY)
 LOCAL_PATH := $(BB_PATH)
 include $(CLEAR_VARS)
 
+# Explicitly set an architecture specific CONFIG_CROSS_COMPILER_PREFIX
+ifeq ($(TARGET_ARCH),arm)
+	BUSYBOX_CROSS_COMPILER_PREFIX := "arm-eabi-"
+endif
+ifeq ($(TARGET_ARCH),x86)
+	BUSYBOX_CROSS_COMPILER_PREFIX := "i686-linux-android-"
+endif
+
 # Each profile require a compressed usage/config, outside the source tree for git history
 # We keep the uncompressed headers in local include-<profile> to track config changes.
 # TODO: generate includes in out/
@@ -42,6 +50,7 @@ $(BUSYBOX_CONFIG):
 	@cd $(BB_PATH) && make clean
 	@cd $(BB_PATH) && git clean -f -- ./include-$@/
 	cp $(BB_PATH)/.config-$@ $(BB_PATH)/.config
+	echo "CONFIG_CROSS_COMPILER_PREFIX=\"$(BUSYBOX_CROSS_COMPILER_PREFIX)\"" >> $(BB_PATH)/.config
 	cd $(BB_PATH) && make prepare
 	@#cp $(BB_PATH)/.config $(BB_PATH)/.config-$@
 	@mkdir -p $(BB_PATH)/include-$@
@@ -76,6 +85,16 @@ ifeq ($(TARGET_ARCH),arm)
 	android/libc/arch-arm/syscalls/sysinfo.S
 endif
 
+ifeq ($(TARGET_ARCH),x86)
+	BUSYBOX_SRC_FILES += \
+	android/libc/arch-x86/syscalls/adjtimex.S \
+	android/libc/arch-x86/syscalls/getsid.S \
+	android/libc/arch-x86/syscalls/stime.S \
+	android/libc/arch-x86/syscalls/swapon.S \
+	android/libc/arch-x86/syscalls/swapoff.S \
+	android/libc/arch-x86/syscalls/sysinfo.S
+endif
+
 ifeq ($(TARGET_ARCH),mips)
 	BUSYBOX_SRC_FILES += \
 	android/libc/arch-mips/syscalls/adjtimex.S \
@@ -146,6 +165,7 @@ LOCAL_SRC_FILES += android/libc/__set_errno.c
 endif
 LOCAL_C_INCLUDES := $(BUSYBOX_C_INCLUDES)
 LOCAL_CFLAGS := $(BUSYBOX_CFLAGS)
+LOCAL_LDFLAGS += -Wl,--no-fatal-warnings
 LOCAL_MODULE := busybox
 LOCAL_MODULE_TAGS := eng debug
 LOCAL_MODULE_PATH := $(TARGET_OUT_OPTIONAL_EXECUTABLES)
@@ -191,6 +211,7 @@ LOCAL_CFLAGS += \
   -Dgetmntent=busybox_getmntent \
   -Dgetmntent_r=busybox_getmntent_r \
   -Dgenerate_uuid=busybox_generate_uuid
+LOCAL_LDFLAGS += -Wl,--no-fatal-warnings
 LOCAL_FORCE_STATIC_EXECUTABLE := true
 LOCAL_MODULE := static_busybox
 LOCAL_MODULE_STEM := busybox
diff --git a/android/libc/arch-x86/syscalls/adjtimex.S b/android/libc/arch-x86/syscalls/adjtimex.S
new file mode 100644
index 0000000..869baf0
--- /dev/null
+++ b/android/libc/arch-x86/syscalls/adjtimex.S
@@ -0,0 +1,26 @@
+/* autogenerated by gensyscalls.py */
+#include <linux/err.h>
+#include <asm/unistd.h>
+
+    .text
+    .type adjtimex, @function
+    .globl adjtimex
+    .align 4
+
+
+adjtimex:
+    pushl   %ebx
+    mov     8(%esp), %ebx
+    movl    $__NR_adjtimex, %eax
+    int     $0x80
+    cmpl    $-MAX_ERRNO, %eax
+    jb      1f
+    negl    %eax
+    pushl   %eax
+    call    __set_errno
+    addl    $4, %esp
+    orl     $-1, %eax
+1:
+    popl    %ebx
+    ret
+
diff --git a/android/libc/arch-x86/syscalls/getsid.S b/android/libc/arch-x86/syscalls/getsid.S
new file mode 100644
index 0000000..6fe39eb
--- /dev/null
+++ b/android/libc/arch-x86/syscalls/getsid.S
@@ -0,0 +1,25 @@
+/* autogenerated by gensyscalls.py */
+#include <linux/err.h>
+#include <asm/unistd.h>
+
+    .text
+    .type getsid, @function
+    .globl getsid
+    .align 4
+
+getsid:
+    pushl   %ebx
+    mov     8(%esp), %ebx
+    movl    $__NR_getsid, %eax
+    int     $0x80
+    cmpl    $-MAX_ERRNO, %eax
+    jb      1f
+    negl    %eax
+    pushl   %eax
+    call    __set_errno
+    addl    $4, %esp
+    orl     $-1, %eax
+1:
+    popl    %ebx
+    ret
+
diff --git a/android/libc/arch-x86/syscalls/stime.S b/android/libc/arch-x86/syscalls/stime.S
new file mode 100644
index 0000000..185e26f
--- /dev/null
+++ b/android/libc/arch-x86/syscalls/stime.S
@@ -0,0 +1,26 @@
+/* autogenerated by gensyscalls.py */
+#include <linux/err.h>
+#include <asm/unistd.h>
+
+    .text
+    .type stime, @function
+    .globl stime
+    .align 4
+
+
+stime:
+    pushl   %ebx
+    mov     8(%esp), %ebx
+    movl    $__NR_stime, %eax
+    int     $0x80
+    cmpl    $-MAX_ERRNO, %eax
+    jb      1f
+    negl    %eax
+    pushl   %eax
+    call    __set_errno
+    addl    $4, %esp
+    orl     $-1, %eax
+1:
+    popl    %ebx
+    ret
+    
diff --git a/android/libc/arch-x86/syscalls/swapoff.S b/android/libc/arch-x86/syscalls/swapoff.S
new file mode 100644
index 0000000..f13833c
--- /dev/null
+++ b/android/libc/arch-x86/syscalls/swapoff.S
@@ -0,0 +1,25 @@
+/* autogenerated by gensyscalls.py */
+#include <linux/err.h>
+#include <asm/unistd.h>
+
+    .text
+    .type swapoff, @function
+    .globl swapoff
+    .align 4
+
+swapoff:
+    pushl   %ebx
+    mov     8(%esp), %ebx
+    movl    $__NR_swapoff, %eax
+    int     $0x80
+    cmpl    $-MAX_ERRNO, %eax
+    jb      1f
+    negl    %eax
+    pushl   %eax
+    call    __set_errno
+    addl    $4, %esp
+    orl     $-1, %eax
+1:
+    popl    %ebx
+    ret
+    
diff --git a/android/libc/arch-x86/syscalls/swapon.S b/android/libc/arch-x86/syscalls/swapon.S
new file mode 100644
index 0000000..fe554a6
--- /dev/null
+++ b/android/libc/arch-x86/syscalls/swapon.S
@@ -0,0 +1,28 @@
+/* autogenerated by gensyscalls.py */
+#include <linux/err.h>
+#include <asm/unistd.h>
+
+    .text
+    .type swapon, @function
+    .globl swapon
+    .align 4
+   
+swapon:
+    pushl   %ebx
+    pushl   %ecx
+    mov     12(%esp), %ebx
+    mov     16(%esp), %ecx
+    movl    $__NR_swapon, %eax
+    int     $0x80
+    cmpl    $-MAX_ERRNO, %eax
+    jb      1f
+    negl    %eax
+    pushl   %eax
+    call    __set_errno
+    addl    $4, %esp
+    orl     $-1, %eax
+1:
+    popl    %ecx
+    popl    %ebx
+    ret
+
diff --git a/android/libc/arch-x86/syscalls/sysinfo.S b/android/libc/arch-x86/syscalls/sysinfo.S
new file mode 100644
index 0000000..bafe20d
--- /dev/null
+++ b/android/libc/arch-x86/syscalls/sysinfo.S
@@ -0,0 +1,25 @@
+/* autogenerated by gensyscalls.py */
+#include <linux/err.h>
+#include <asm/unistd.h>
+
+    .text
+    .type sysinfo, @function
+    .globl sysinfo
+    .align 4
+
+sysinfo:
+    pushl   %ebx
+    mov     8(%esp), %ebx
+    movl    $__NR_sysinfo, %eax
+    int     $0x80
+    cmpl    $-MAX_ERRNO, %eax
+    jb      1f
+    negl    %eax
+    pushl   %eax
+    call    __set_errno
+    addl    $4, %esp
+    orl     $-1, %eax
+1:
+    popl    %ebx
+    ret
+
